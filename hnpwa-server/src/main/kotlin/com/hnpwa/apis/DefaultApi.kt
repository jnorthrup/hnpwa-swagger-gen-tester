/**
 * hnpwa
 * use this to generate from swagger tools
 *
 * OpenAPI spec version: 0
 * Contact: jim@vsiwest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hnpwa.apis


// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288

import com.google.gson.*
import com.hnpwa.*
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.response.*
import io.ktor.routing.*


fun Route.DefaultApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    get<Paths.askPageJsonGet> { it: Paths.askPageJsonGet ->
        val exampleContentType = "application/json"
        val exampleContentString = """[ {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        }, {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        } ]"""

        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }

    }


    get<Paths.itemIdJsonGet> { it: Paths.itemIdJsonGet ->
        call.respond(HttpStatusCode.NotImplemented)

    }


    get<Paths.newestPageJsonGet> { it: Paths.newestPageJsonGet ->
        val exampleContentType = "application/json"
        val exampleContentString = """[ {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        }, {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        } ]"""

        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }

    }


    get<Paths.newsPageJsonGet> { it: Paths.newsPageJsonGet ->
        val exampleContentType = "application/json"
        val exampleContentString = """[ {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        }, {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        } ]"""

        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }

    }


    get<Paths.showPageJsonGet> { it: Paths.showPageJsonGet ->
        val exampleContentType = "application/json"
        val exampleContentString = """[ {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        }, {
          "time_ago" : "time_ago",
          "comments_count" : 5,
          "domain" : "domain",
          "id" : 0,
          "time" : 1,
          "title" : "title",
          "type" : "type",
          "user" : "user",
          "url" : "url",
          "points" : 6
        } ]"""

        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }

    }


    get<Paths.userIdJsonGet> { it: Paths.userIdJsonGet ->
        call.respond(HttpStatusCode.NotImplemented)

    }

}
